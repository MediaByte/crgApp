"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/possibleConstructorReturn"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _keycode = _interopRequireDefault(require("keycode"));

var _styles = require("@material-ui/core/styles");

var _Zoom = _interopRequireDefault(require("@material-ui/core/Zoom"));

var _transitions = require("@material-ui/core/styles/transitions");

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _reactHelpers = require("@material-ui/core/utils/reactHelpers");

var styles = function styles(theme) {
  return {
    root: {
      zIndex: 1050,
      display: 'flex',
      flexDirection: 'column-reverse' // Place the Actions above the FAB.

    },
    actions: {
      display: 'flex',
      flexDirection: 'column-reverse',
      // Display the first action at the bottom.
      marginBottom: theme.spacing.unit * 2
    },
    actionsClosed: {
      transition: 'top 0s linear 0.2s'
    }
  };
};

var SpeedDial =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(SpeedDial, _React$Component);

  function SpeedDial() {
    var _ref;

    var _temp, _this;

    (0, _classCallCheck2.default)(this, SpeedDial);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (0, _possibleConstructorReturn2.default)(_this, (_temp = _this = (0, _possibleConstructorReturn2.default)(this, (_ref = SpeedDial.__proto__ || Object.getPrototypeOf(SpeedDial)).call.apply(_ref, [this].concat(args))), _this.state = {
      nextKey: null,
      prevKey: null
    }, _this.handleKeyDown = function (event) {
      var actions = _reactDom.default.findDOMNode(_this.actions);

      var fab = _reactDom.default.findDOMNode(_this.fab);

      var key = (0, _keycode.default)(event);
      var currentFocus = document.activeElement;
      var _this$props = _this.props,
          open = _this$props.open,
          onClose = _this$props.onClose,
          onKeyDown = _this$props.onKeyDown;
      var _this$state = _this.state,
          nextKey = _this$state.nextKey,
          prevKey = _this$state.prevKey;
      var firstKeyPress = (key === 'up' || key === 'down') && nextKey == null;

      if (key === 'up' || key === 'down') {
        event.preventDefault();
      } // If not actions, SpeedDial must be focused, so focus the first action.


      if (currentFocus.parentElement.parentElement !== actions) {
        if (open && (firstKeyPress || key === nextKey)) {
          actions.firstChild.firstChild.focus(); // This determines which key focuses the next / previous action.
          // For example, if a visually impaired user presses down to select the first action
          // (i.e. following DOM ordering), down will select the next action, and up the previous.

          if (nextKey == null) {
            _this.setState({
              nextKey: key
            });

            _this.setState({
              prevKey: key === 'up' ? 'down' : 'up'
            });
          }
        } // Select the previous action or SpeedDial

      } else if (key === prevKey) {
        event.preventDefault();

        if (currentFocus.parentElement.previousElementSibling) {
          currentFocus.parentElement.previousElementSibling.firstChild.focus();
        } else {
          _reactDom.default.findDOMNode(_this.fab).focus();
        } // Select the next action

      } else if (key === nextKey) {
        event.preventDefault();

        if (currentFocus.parentElement.nextElementSibling) {
          currentFocus.parentElement.nextElementSibling.firstChild.focus();
        } // Close the SpeedDial

      } else if (key === 'esc') {
        fab.focus();

        if (onClose) {
          onClose(event, key);
        }
      } // Forward the event


      if (onKeyDown) {
        onKeyDown(event, key);
      }
    }, _temp));
  }

  (0, _createClass2.default)(SpeedDial, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          ariaLabel = _props.ariaLabel,
          ButtonProps = _props.ButtonProps,
          childrenProp = _props.children,
          classes = _props.classes,
          classNameProp = _props.className,
          hidden = _props.hidden,
          iconProp = _props.icon,
          onClick = _props.onClick,
          onClose = _props.onClose,
          onKeyDown = _props.onKeyDown,
          open = _props.open,
          openIcon = _props.openIcon,
          TransitionComponent = _props.TransitionComponent,
          transitionDuration = _props.transitionDuration,
          TransitionProps = _props.TransitionProps,
          other = (0, _objectWithoutProperties2.default)(_props, ["ariaLabel", "ButtonProps", "children", "classes", "className", "hidden", "icon", "onClick", "onClose", "onKeyDown", "open", "openIcon", "TransitionComponent", "transitionDuration", "TransitionProps"]); // Filter the label for valid id characters.

      var id = ariaLabel.replace(/^[^a-z]+|[^\w:.-]+/gi, '');
      var totalValidChildren = 0;

      _react.default.Children.forEach(childrenProp, function (child) {
        if (_react.default.isValidElement(child)) totalValidChildren += 1;
      });

      var validChildCount = 0;

      var children = _react.default.Children.map(childrenProp, function (child) {
        if (!_react.default.isValidElement(child)) return null;
        var delay = 30 * (open ? validChildCount : totalValidChildren - validChildCount);
        validChildCount += 1;
        return _react.default.cloneElement(child, {
          delay: delay,
          open: open,
          onKeyDown: _this2.handleKeyDown,
          id: "".concat(id, "-item-").concat(validChildCount)
        });
      });

      var icon = function icon() {
        if (!_react.default.isValidElement(iconProp)) {
          return iconProp;
        }

        if ((0, _reactHelpers.isMuiElement)(iconProp, ['SpeedDialIcon'])) {
          return _react.default.cloneElement(iconProp, {
            open: open
          });
        }

        return icon;
      };

      return _react.default.createElement("div", (0, _extends2.default)({
        className: (0, _classnames.default)(classes.root, classNameProp)
      }, other), _react.default.createElement(TransitionComponent, (0, _extends2.default)({
        "in": !hidden,
        timeout: transitionDuration,
        unmountOnExit: true
      }, TransitionProps), _react.default.createElement(_Button.default, (0, _extends2.default)({
        variant: "fab",
        color: "primary",
        onClick: onClick,
        onKeyDown: this.handleKeyDown,
        "aria-label": ariaLabel,
        "aria-haspopup": "true",
        "aria-expanded": open ? 'true' : 'false',
        "aria-controls": "".concat(id, "-actions"),
        ref: function ref(node) {
          _this2.fab = node;
        }
      }, ButtonProps), icon())), _react.default.createElement("div", {
        id: "".concat(id, "-actions"),
        className: (0, _classnames.default)(classes.actions, (0, _defineProperty2.default)({}, classes.actionsClosed, !open)),
        ref: function ref(node) {
          _this2.actions = node;
        }
      }, children));
    }
  }]);
  return SpeedDial;
}(_react.default.Component);

SpeedDial.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * The aria-label of the `Button` element.
   * Also used to provide the `id` for the `SpeedDial` element and its children.
   */
  ariaLabel: _propTypes.default.string.isRequired,

  /**
   * Properties applied to the `Button` element.
   */
  ButtonProps: _propTypes.default.object,

  /**
   * SpeedDialActions to display when the SpeedDial is `open`.
   */
  children: _propTypes.default.node.isRequired,

  /**
   * Useful to extend the style applied to components.
   */
  classes: _propTypes.default.object.isRequired,

  /**
   * @ignore
   */
  className: _propTypes.default.string,

  /**
   * If `true`, the SpeedDial will be hidden.
   */
  hidden: _propTypes.default.bool,

  /**
   * The icon to display in the SpeedDial Floating Action Button. The `SpeedDialIcon` component
   * provides a default Icon with animation.
   */
  icon: _propTypes.default.element.isRequired,

  /**
   * @ignore
   */
  onClick: _propTypes.default.func,

  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback
   * @param {string} key The key pressed
   */
  onClose: _propTypes.default.func,

  /**
   * @ignore
   */
  onKeyDown: _propTypes.default.func,

  /**
   * If `true`, the SpeedDial is open.
   */
  open: _propTypes.default.bool.isRequired,

  /**
   * The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.
   */
  openIcon: _propTypes.default.node,

  /**
   * Transition component.
   */
  TransitionComponent: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),

  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   */
  transitionDuration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
    enter: _propTypes.default.number,
    exit: _propTypes.default.number
  })]),

  /**
   * Properties applied to the `Transition` element.
   */
  TransitionProps: _propTypes.default.object
} : {};
SpeedDial.defaultProps = {
  hidden: false,
  TransitionComponent: _Zoom.default,
  transitionDuration: {
    enter: _transitions.duration.enteringScreen,
    exit: _transitions.duration.leavingScreen
  }
};

var _default = (0, _styles.withStyles)(styles)(SpeedDial);

exports.default = _default;