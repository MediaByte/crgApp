"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.style = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/possibleConstructorReturn"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/inherits"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = require("react-dom");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _keycode = _interopRequireDefault(require("keycode"));

var _classnames = _interopRequireDefault(require("classnames"));

var _withStyles = _interopRequireDefault(require("@material-ui/core/styles/withStyles"));

var _ButtonBase = _interopRequireDefault(require("@material-ui/core/ButtonBase"));

var _colorManipulator = require("@material-ui/core/styles/colorManipulator");

var _clamp = _interopRequireDefault(require("../utils/clamp"));

var style = function style(theme) {
  var commonTransitionsOptions = {
    duration: theme.transitions.duration.short,
    easing: theme.transitions.easing.easeOut
  };
  var commonTransitionsProperty = ['width', 'height', 'box-shadow', 'left', 'top'];
  var commonTransitions = theme.transitions.create(commonTransitionsProperty, commonTransitionsOptions);
  var colors = {
    primary: theme.palette.primary.main,
    secondary: theme.palette.grey[400],
    focused: theme.palette.grey[500],
    disabled: theme.palette.grey[400]
  };
  return {
    /* Styles for wrapper container */
    container: {
      position: 'relative',
      width: '100%',
      margin: '10px 0',
      padding: '6px 0',
      cursor: 'pointer',
      WebkitTapHighlightColor: 'transparent',
      '&$disabled': {
        cursor: 'no-drop'
      },
      '&$vertical': {
        height: '100%',
        margin: '0 10px',
        padding: '0 6px'
      },
      '&$reverse': {
        transform: 'scaleX(-1)'
      },
      '&$vertical$reverse': {
        transform: 'scaleY(-1)'
      }
    },

    /* Tracks styles */
    track: {
      position: 'absolute',
      transform: 'translate(0, -50%)',
      top: '50%',
      height: 2,
      '&$focused, &$activated': {
        transition: 'none',
        backgroundColor: colors.focused
      },
      '&$disabled': {
        backgroundColor: colors.secondary
      },
      '&$vertical': {
        transform: 'translate(-50%, 0)',
        left: '50%',
        top: 'initial',
        width: 2
      },
      '&$jumped': {
        backgroundColor: colors.focused
      }
    },
    trackBefore: {
      zIndex: 1,
      left: 0,
      backgroundColor: colors.primary,
      transition: commonTransitions,
      '&$focused, &$activated, &$jumped': {
        backgroundColor: colors.primary
      }
    },
    trackAfter: {
      right: 0,
      backgroundColor: colors.secondary,
      transition: commonTransitions,
      '&$vertical': {
        bottom: 0
      }
    },

    /* Thumb styles  */
    thumb: {
      position: 'absolute',
      zIndex: 2,
      transform: 'translate(-50%, -50%)',
      width: 12,
      height: 12,
      borderRadius: '50%',
      transition: commonTransitions,
      backgroundColor: colors.primary,
      '&$focused': {
        boxShadow: "0px 0px 0px 9px ".concat((0, _colorManipulator.fade)(colors.primary, 0.16))
      },
      '&$activated': {
        width: 17,
        height: 17,
        transition: 'none'
      },
      '&$disabled': {
        cursor: 'no-drop',
        width: 9,
        height: 9,
        backgroundColor: colors.disabled
      },
      '&$zero': {
        border: "2px solid ".concat(colors.disabled),
        backgroundColor: 'transparent'
      },
      '&$focused$zero': {
        border: "2px solid ".concat(colors.focused),
        backgroundColor: (0, _colorManipulator.fade)(colors.focused, 0.34),
        boxShadow: "0px 0px 0px 9px ".concat((0, _colorManipulator.fade)(colors.focused, 0.34))
      },
      '&$activated$zero': {
        border: "2px solid ".concat(colors.focused)
      },
      '&$jumped': {
        width: 17,
        height: 17
      }
    },
    focused: {},
    activated: {},
    disabled: {},
    zero: {},
    vertical: {},
    reverse: {},
    jumped: {}
  };
};

exports.style = style;

function addEventListener(node, event, handler, capture) {
  node.addEventListener(event, handler, capture);
  return {
    remove: function remove() {
      node.removeEventListener(event, handler, capture);
    }
  };
}

function percentToValue(percent, min, max) {
  return (max - min) * percent / 100 + min;
}

function roundToStep(number, step) {
  return Math.round(number / step) * step;
}

function getOffset(node) {
  var _global = global,
      scrollY = _global.scrollY,
      scrollX = _global.scrollX;

  var _node$getBoundingClie = node.getBoundingClientRect(),
      left = _node$getBoundingClie.left,
      top = _node$getBoundingClie.top;

  return {
    top: top + scrollY,
    left: left + scrollX
  };
}

function getMousePosition(event) {
  if (event.changedTouches && event.changedTouches[0]) {
    return {
      x: event.changedTouches[0].pageX,
      y: event.changedTouches[0].pageY
    };
  }

  return {
    x: event.pageX,
    y: event.pageY
  };
}

function calculatePercent(node, event, isVertical, isReverted) {
  var _node$getBoundingClie2 = node.getBoundingClientRect(),
      width = _node$getBoundingClie2.width,
      height = _node$getBoundingClie2.height;

  var _getOffset = getOffset(node),
      top = _getOffset.top,
      left = _getOffset.left;

  var _getMousePosition = getMousePosition(event),
      x = _getMousePosition.x,
      y = _getMousePosition.y;

  var value = isVertical ? y - top : x - left;
  var onePercent = (isVertical ? height : width) / 100;
  return isReverted ? 100 - (0, _clamp.default)(value / onePercent) : (0, _clamp.default)(value / onePercent);
}

function preventPageScrolling(event) {
  event.preventDefault();
}

var Slider =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(Slider, _React$Component);

  function Slider() {
    var _ref;

    var _temp, _this;

    (0, _classCallCheck2.default)(this, Slider);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (0, _possibleConstructorReturn2.default)(_this, (_temp = _this = (0, _possibleConstructorReturn2.default)(this, (_ref = Slider.__proto__ || Object.getPrototypeOf(Slider)).call.apply(_ref, [this].concat(args))), _this.state = {
      currentState: 'initial'
    }, _this.handleKeyDown = function (event) {
      var _this$props = _this.props,
          min = _this$props.min,
          max = _this$props.max,
          currentValue = _this$props.value;
      var onePercent = Math.abs((max - min) / 100);
      var step = _this.props.step || onePercent;
      var value;

      switch ((0, _keycode.default)(event)) {
        case 'home':
          value = min;
          break;

        case 'end':
          value = max;
          break;

        case 'page up':
          value = currentValue + onePercent * 10;
          break;

        case 'page down':
          value = currentValue - onePercent * 10;
          break;

        case 'right':
        case 'up':
          value = currentValue + step;
          break;

        case 'left':
        case 'down':
          value = currentValue - step;
          break;

        default:
          return;
      }

      event.preventDefault();
      value = (0, _clamp.default)(value, min, max);

      _this.emitChange(event, value);
    }, _this.handleFocus = function () {
      _this.setState({
        currentState: 'focused'
      });
    }, _this.handleBlur = function () {
      _this.setState({
        currentState: 'normal'
      });
    }, _this.handleClick = function (event) {
      var _this$props2 = _this.props,
          min = _this$props2.min,
          max = _this$props2.max,
          vertical = _this$props2.vertical,
          reverse = _this$props2.reverse;
      var percent = calculatePercent(_this.container, event, vertical, reverse);
      var value = percentToValue(percent, min, max);

      _this.emitChange(event, value, function () {
        _this.playJumpAnimation();
      });
    }, _this.handleTouchStart = function (event) {
      _this.setState({
        currentState: 'activated'
      });

      _this.globalMouseUpListener = addEventListener(document, 'touchend', _this.handleMouseUp);

      if (typeof _this.props.onDragStart === 'function') {
        _this.props.onDragStart(event);
      }
    }, _this.handleMouseDown = function (event) {
      _this.setState({
        currentState: 'activated'
      });

      _this.globalMouseUpListener = addEventListener(document, 'mouseup', _this.handleMouseUp);
      _this.globalMouseMoveListener = addEventListener(document, 'mousemove', _this.handleMouseMove);

      if (typeof _this.props.onDragEnd === 'function') {
        _this.props.onDragEnd(event);
      }
    }, _this.handleMouseUp = function (event) {
      _this.setState({
        currentState: 'normal'
      });

      if (_this.globalMouseUpListener) {
        _this.globalMouseUpListener.remove();
      }

      if (_this.globalMouseMoveListener) {
        _this.globalMouseMoveListener.remove();
      }

      if (typeof _this.props.onDragEnd === 'function') {
        _this.props.onDragEnd(event);
      }
    }, _this.handleMouseMove = function (event) {
      var _this$props3 = _this.props,
          min = _this$props3.min,
          max = _this$props3.max,
          vertical = _this$props3.vertical,
          reverse = _this$props3.reverse;
      var percent = calculatePercent(_this.container, event, vertical, reverse);
      var value = percentToValue(percent, min, max);

      _this.emitChange(event, value);
    }, _temp));
  }

  (0, _createClass2.default)(Slider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.container) {
        this.container.addEventListener('touchstart', preventPageScrolling, {
          passive: false
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.container.removeEventListener('touchstart', preventPageScrolling, {
        passive: false
      });
    }
  }, {
    key: "emitChange",
    value: function emitChange(event, rawValue, callback) {
      var _props = this.props,
          step = _props.step,
          previousValue = _props.value,
          onChange = _props.onChange;
      var value = rawValue;

      if (step) {
        value = roundToStep(rawValue, step);
      } else {
        value = Number(rawValue.toFixed(3));
      }

      if (typeof onChange === 'function' && value !== previousValue) {
        onChange(event, value);

        if (typeof callback === 'function') {
          callback();
        }
      }
    }
  }, {
    key: "calculateTrackAfterStyles",
    value: function calculateTrackAfterStyles(percent) {
      var currentState = this.state.currentState;

      switch (currentState) {
        case 'activated':
          return "calc(100% - ".concat(percent === 0 ? 7 : 5, "px)");

        case 'disabled':
          return "calc(".concat(100 - percent, "% - 6px)");

        default:
          return 'calc(100% - 5px)';
      }
    }
  }, {
    key: "calculateTrackBeforeStyles",
    value: function calculateTrackBeforeStyles(percent) {
      var currentState = this.state.currentState;

      switch (currentState) {
        case 'disabled':
          return "calc(".concat(percent, "% - 6px)");

        default:
          return "".concat(percent, "%");
      }
    }
  }, {
    key: "playJumpAnimation",
    value: function playJumpAnimation() {
      var _this2 = this;

      this.setState({
        currentState: 'jumped'
      }, function () {
        setTimeout(function () {
          _this2.setState({
            currentState: 'normal'
          });
        }, _this2.props.theme.transitions.duration.complex);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _commonClasses,
          _classNames,
          _this3 = this;

      var currentState = this.state.currentState;
      var _props2 = this.props,
          Component = _props2.component,
          classes = _props2.classes,
          value = _props2.value,
          min = _props2.min,
          max = _props2.max,
          vertical = _props2.vertical,
          reverse = _props2.reverse,
          disabled = _props2.disabled,
          otherProps = (0, _objectWithoutProperties2.default)(_props2, ["component", "classes", "value", "min", "max", "vertical", "reverse", "disabled"]);
      var percent = (0, _clamp.default)((value - min) * 100 / (max - min));
      var commonClasses = (_commonClasses = {}, (0, _defineProperty2.default)(_commonClasses, classes.disabled, disabled), (0, _defineProperty2.default)(_commonClasses, classes.jumped, !disabled && currentState === 'jumped'), (0, _defineProperty2.default)(_commonClasses, classes.focused, !disabled && currentState === 'focused'), (0, _defineProperty2.default)(_commonClasses, classes.activated, !disabled && currentState === 'activated'), _commonClasses);
      var containerClasses = (0, _classnames.default)(classes.container, (_classNames = {}, (0, _defineProperty2.default)(_classNames, classes.vertical, vertical), (0, _defineProperty2.default)(_classNames, classes.reverse, reverse), (0, _defineProperty2.default)(_classNames, classes.disabled, disabled), _classNames));
      var trackBeforeClasses = (0, _classnames.default)(classes.track, classes.trackBefore, commonClasses, (0, _defineProperty2.default)({}, classes.vertical, vertical));
      var trackAfterClasses = (0, _classnames.default)(classes.track, classes.trackAfter, commonClasses, (0, _defineProperty2.default)({}, classes.vertical, vertical));
      var thumbClasses = (0, _classnames.default)(classes.thumb, commonClasses, (0, _defineProperty2.default)({}, classes.zero, percent === 0));
      var trackProperty = vertical ? 'height' : 'width';
      var thumbProperty = vertical ? 'top' : 'left';
      var inlineTrackBeforeStyles = (0, _defineProperty2.default)({}, trackProperty, this.calculateTrackBeforeStyles(percent));
      var inlineTrackAfterStyles = (0, _defineProperty2.default)({}, trackProperty, this.calculateTrackAfterStyles(percent));
      var inlineThumbStyles = (0, _defineProperty2.default)({}, thumbProperty, "".concat(percent, "%"));
      return _react.default.createElement(Component, (0, _extends2.default)({
        role: "slider",
        className: containerClasses,
        "aria-valuenow": value,
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-orientation": vertical ? 'vertical' : 'horizontal',
        onClick: this.handleClick,
        ref: function ref(node) {
          _this3.container = (0, _reactDom.findDOMNode)(node);
        }
      }, otherProps), _react.default.createElement("div", {
        className: trackBeforeClasses,
        style: inlineTrackBeforeStyles
      }), _react.default.createElement(_ButtonBase.default, {
        className: thumbClasses,
        disableRipple: true,
        style: inlineThumbStyles,
        onBlur: this.handleBlur,
        onKeyDown: this.handleKeyDown,
        onMouseDown: this.handleMouseDown,
        onTouchStartCapture: this.handleTouchStart,
        onTouchMove: this.handleMouseMove,
        onFocusVisible: this.handleFocus
      }), _react.default.createElement("div", {
        className: trackAfterClasses,
        style: inlineTrackAfterStyles
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (nextProps.disabled) {
        return {
          currentState: 'disabled'
        };
      }

      if (!nextProps.disabled && prevState.currentState === 'disabled') {
        return {
          currentState: 'normal'
        };
      }

      return null;
    }
  }]);
  return Slider;
}(_react.default.Component);

Slider.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Useful to extend the style applied to components.
   */
  classes: _propTypes.default.object.isRequired,

  /**
   * @ignore
   */
  component: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),

  /**
   * If `true`, the slider will be disabled.
   */
  disabled: _propTypes.default.bool,

  /**
   * The maximum allowed value of the slider.
   * Should not be equal to min.
   */
  max: _propTypes.default.number,

  /**
   * The minimum allowed value of the slider.
   * Should not be equal to max.
   */
  min: _propTypes.default.number,

  /**
   * Callback function that is fired when the slider's value changed.
   */
  onChange: _propTypes.default.func,

  /**
   * Callback function that is fired when the slide has stopped moving.
   */
  onDragEnd: _propTypes.default.func,

  /**
   * Callback function that is fired when the slider has begun to move.
   */
  onDragStart: _propTypes.default.func,

  /**
   * If `true`, the slider will be reversed.
   */
  reverse: _propTypes.default.bool,

  /**
   * The granularity the slider can step through values.
   */
  step: _propTypes.default.number,

  /**
   * @ignore
   */
  theme: _propTypes.default.object.isRequired,

  /**
   * The value of the slider.
   */
  value: _propTypes.default.number,

  /**
   * If `true`, the slider will be vertical.
   */
  vertical: _propTypes.default.bool
} : {};
Slider.defaultProps = {
  min: 0,
  max: 100,
  value: 50,
  component: 'div'
};

var _default = (0, _withStyles.default)(style, {
  name: 'MuiSlider',
  withTheme: true
})(Slider);

exports.default = _default;